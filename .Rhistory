capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(sol),capacity)
sol[[1]][[1]]
sol[[2]][[1]]
debugSource('D:/Projects/R Studio/naloga5/initialSolver.R')
sol <- initialSolver(sites,paths,capacity)
closest
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(sol),capacity)
sol <- initialSolver(sites,paths,capacity)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem8.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
solutionCheck(sol)
solutionCheck(sites,paths,megaToNormalSolution(sol),capacity)
solution <- data.frame(ID=integer(),
Type=integer(),
FullPath = list(),
Serviced = list(),
load = double())
solution
colnames(solution)
colnames(solution)
solution <- data.frame(ID=integer(),
Type=integer(),
FullPath = c(),
Serviced = c(),
load = double())
colnames(solution)
solution <- data.frame(ID=integer(),
Type=integer(),
FullPath = c(integer()),
Serviced = c(integer()),
load = double())
solution
colnames(solution)
sol8 <- sol
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
sol
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
bla <- data.frame(1,c(1,2),c(1,2),4,4)
bla
bla <- data.frame(1,list(1,2),list(1,2),4,4)
bla
ncol(bla)
ncol(solution)
df <- data.frame(1,2)
df
df[1,]
df[,1]
df[1,]
df[2,] <- 4,5
df[2,] <- c(4,5)
df
df <- data.frame(integer(),c(integer()))
df
df <- c(1, c(1,2))
df
df <- data.frame(integer(),c(integer()))
df[1,] <- c(1,c(1,2))
df[1,] <- c(1,list(1,2))
df[1,] <- list(1,c(1,2))
df
df[1,1] <- c(1,2,3)
df <- data.frame(integer(),c(integer()))
df[1] <- list(1,list(1,2,3))
df
numcol(df)
ncol(df)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(sol),capacity)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(sol),capacity)
sol1 <- sol
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem2.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(sol),capacity)
sol2 <- sol
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem3.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(sol),capacity)
sol3 <- sol
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem4.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(sol),capacity)
sol4 <- sol
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem5.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(sol),capacity)
sol5 <- sol
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem6.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(sol),capacity)
sol6 <- sol
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem7.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(sol),capacity)
sol7 <- sol
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(sol),capacity)
sol
mutate2 <- function(sites,paths,capacity, megaSolution){
invisible(capture.output( orgCost <- solutionCheck(sites,paths,megaToNormalSolution(megaSolution),capacity) ))
cat("Original solution cost:", orgCost,"\n")
totalCost <- 0
for(type in c(1,2,3)){
typeSolutions <- megaSolution[[type]]
pathSolutions <- typeSolutions[[1]] #aka the initial solution
#Cost of initial solution for type
invisible(capture.output( bestCost <- solutionCheckType(sites,paths,pathSolutions, capacity, type) ))
best <- pathSolutions
cat(" Initial best cost for type", type, ": ", bestCost, "\n")
#For stats
invalidAttempt <- 0
worseAttempt <- 0
randomTimedOut <- 0
i <- 1
while(1){
solNew <- removeAndReinsert2(sites,paths,capacity,typeSolutions)
if(is.null(solNew)){
randomTimedOut <- 1
break
}
#Check validity and cost of newly constructed solution
invisible(capture.output( res <- solutionCheckType(sites,paths,solNew[[1]],capacity,type) ))
#If the cost is better, replace best known solution
if(res < bestCost){
costDecrease <- bestCost - res
cat("New best found ", costDecrease, " decrease in cost!!! Prev: (",bestCost,")\n")
bestCost <- res
best <- solNew
#Reset iteration counter to 1
i <- 1
} else{
if(is.infinite(res)) invalidAttempt <- invalidAttempt + 1
else worstAttempt <- worseAttempt + 1
}
i <- i + 1
if(i == 500){
cat("No more changes for type", type,". Invalid Attempts:",invalidAttempt,"Worse Attempts:", worseAttempt,"\n")
break
}
}
totalCost <- totalCost + bestCost
}
cat("Toal cost after execution: ", totalCost, " Change of: ",(totalCost-orgCost),"\n")
solNew
}
mutate2(sites,paths,capacity,sol)
initialSolution <- initialSolver(sites,paths,capacity)
res <- mutate2(sites,paths,capacity,initialSolution)
sol1
sol1[[1]]
sol1[[1]][[1]]
sol1[[1]][[2]]
sol1[[1]][[3]]
source("initialSolver.R")
initialSolution <- initialSolver(sites,paths,capacity)
initialSolution[[1]][[1]]
initialSolution[[1]][[2]]
initialSolution[[1]][[3]]
initialSolution[[2]][[1]]
initialSolution[[2]][[2]]
initialSolution[[2]][[3]]
debugSource('D:/Projects/R Studio/naloga5/common.R')
res <- mutate2(sites,paths,capacity,initialSolution)
res <- mutate2(sites,paths,capacity,initialSolution)
debugSource('D:/Projects/R Studio/naloga5/common.R')
res <- mutate2(sites,paths,capacity,initialSolution)
n
n
res <- mutate2(sites,paths,capacity,initialSolution)
debugSource('D:/Projects/R Studio/naloga5/mutators.R')
debugSource('D:/Projects/R Studio/naloga5/mutators.R')
debugSource('D:/Projects/R Studio/naloga5/mutators.R')
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
res <- mutate2(sites,paths,capacity,initialSolution)
debugSource('D:/Projects/R Studio/naloga5/mutators.R')
res <- mutate2(sites,paths,capacity,initialSolution)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
res <- mutate2(sites,paths,capacity,initialSolution)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
res <- mutate2(sites,paths,capacity,initialSolution)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
res <- mutate2(sites,paths,capacity,initialSolution)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
res <- mutate2(sites,paths,capacity,initialSolution)
sol1new <- res
res <- mutate2(sites,paths,capacity,initialSolution)
res <- mutate2(sites,paths,capacity,initialSolution)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Proble2.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem2.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
initialSolution <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(initialSolution),capacity)
res <- mutate2(sites,paths,capacity,initialSolution)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem3.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
initialSolution <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(initialSolution),capacity)
res <- mutate2(sites,paths,capacity,initialSolution)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb3.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
#Reading file (readFile.R)
file <- "input/Problem4.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol <- initialSolver(sites,paths,capacity)
sol3new <- res
