while(1){
randomLinesInds <- sample(1:length(pathSolutions),2)
randomLine1index <- randomLinesInds[[1]]
randomLine2index <- randomLinesInds[[2]]
type <- pathSolutions[[randomLine1index]][1]
typeIndex <- getTypeIndex(colnames(sites),type)
ns1 <- nodeSolutions[[randomLine1index]]
ns2 <- nodeSolutions[[randomLine2index]]
#Pick a random node from random line 1
if(length(ns1) == 1){
randomNode <- ns1[1]
}
else{
randomNode <- sample(ns1[1:(length(ns1))],1)
}
if(i == maxIter) return(NULL)
if((totalLoads[[randomLine2index]] + sites[randomNode,typeIndex]) < capacity){
break;
}
i <- i + 1
}
#Insert into random line 2
ns2new <- insertNodeIntoBestPlace(sites,paths,capacity,ns2,randomNode,type)
pathSolutions[[randomLine2index]] <- constructFullSolution(sites,paths,ns2new,type)
nodeSolutions[[randomLine2index]] <- ns2new
totalLoads[[randomLine2index]] <- totalLoads[[randomLine2index]] + sites[randomNode,typeIndex]
#Rebuild or remove line 1 if necesary
if(length(ns1) == 1){
pathSolutions[[randomLine1index]] <- NULL
nodeSolutions[[randomLine1index]] <- NULL
totalLoads[[randomLine1index]] <- NULL
}
else{
index <- match(randomNode, ns1)
ns1new <- ns1[-index]
#Repair the path without the lost node
pathSolutions[[randomLine1index]] <- constructFullSolution(sites,paths,ns1new, type)
nodeSolutions[[randomLine1index]] <- list(ns1new)
totalLoads[[randomLine1index]] <- totalLoads[[randomLine1index]] - sites[randomNode,typeIndex]
}
list(pathSolutions,nodeSolutions, totalLoads)
}
insertNodeIntoBestPlace <- function(sites,paths, capacity, nodes,node, type){
bestPlace <- 1
bestCost <- Inf
best <- NULL
for(place in 0:(length(nodes))){
if(place == 0){
nodesNew <- c(node, nodes)
}
else{
nodesNew <- c(nodes[1:place],node)
if(place < length(nodes)){
nodesNew <- c(nodesNew, nodes[(place+1):(length(nodes))])
}
}
repaired <- constructFullSolution(sites,paths,nodesNew,type)
cost <- lineCost(sites,paths,capacity,repaired,nodesNew,type)
if(cost < bestCost){
bestCost <- cost
best <- nodesNew
}
}
best
}
randomSwap11 <- function(sites, paths, capacity, megaSolution){
pathSolutions <- megaSolution[[1]]
nodeSolutions <- megaSolution[[2]]
totalLoads <- megaSolution[[3]]
#Pick random lines 1 and 2
#This is cheap and reapeated until a valid candidates are picked or max iterations is reached
i <- 1
maxIter <- 500
while(1){
if(i == maxIter) return(NULL)
randomLinesInds <- sample(1:length(pathSolutions),2)
randomLine1index <- randomLinesInds[[1]]
randomLine2index <- randomLinesInds[[2]]
type <- pathSolutions[[randomLine1index]][1]
typeIndex <- getTypeIndex(colnames(sites),type)
ns1 <- nodeSolutions[[randomLine1index]]
ns2 <- nodeSolutions[[randomLine2index]]
#If both lines service just one node, no change would happen, retry
if(length(ns1) == 1 & length(ns2) == 1){
i <- i + 1
next;
}
#Pick a random node from random line 1
if(length(ns1) == 1){
randomNode1 <- ns1[1]
}
else{
randomNode1 <- sample(ns1[1:(length(ns1))],1)
}
#Pick a random node from line 2
if(length(ns2) == 1){
randomNode2 <- ns2[1]
}
else{
randomNode2 <- sample(ns2[1:(length(ns2))],1)
}
newLoad1 <- (totalLoads[[randomLine1index]] - sites[randomNode1,typeIndex]) + sites[randomNode2,typeIndex]
newLoad2 <- (totalLoads[[randomLine2index]] - sites[randomNode2,typeIndex]) + sites[randomNode1,typeIndex]
#Found something we can swap
if(newLoad1 < capacity && newLoad2 < capacity){
break;
}
i <- i + 1
}
#Remove selected nodes from lines
index1 <- match(randomNode1, ns1)
index2 <- match(randomNode2, ns2)
ns1new <- ns1[-index1]
ns2new <- ns2[-index2]
ns1new <- insertNodeIntoBestPlace(sites,paths,capacity,ns1new,randomNode2,type)
ns2new <- insertNodeIntoBestPlace(sites,paths,capacity,ns2new,randomNode1,type)
pathSolutions[[randomLine1index]] <- constructFullSolution(sites,paths,ns1new,type)
pathSolutions[[randomLine2index]] <- constructFullSolution(sites,paths,ns2new,type)
nodeSolutions[[randomLine1index]] <- list(ns1new)
nodeSolutions[[randomLine2index]] <- list(ns2new)
totalLoads[[randomLine1index]] <- newLoad1
totalLoads[[randomLine2index]] <- newLoad2
list(pathSolutions,nodeSolutions, totalLoads)
}
randomShift20 <- function(sites, paths, capacity, megaSolution){
pathSolutions <- megaSolution[[1]]
nodeSolutions <- megaSolution[[2]]
totalLoads <- megaSolution[[3]]
#Pick random lines 1 and 2
#This is cheap and reapeated until a valid candidates are picked or max iterations is reached
i <- 1
maxIter <- 500
while(1){
if(i >= maxIter) return(NULL)
randomLinesInds <- sample(1:length(pathSolutions),2)
randomLine1index <- randomLinesInds[[1]]
randomLine2index <- randomLinesInds[[2]]
ns1 <- nodeSolutions[[randomLine1index]]
ns2 <- nodeSolutions[[randomLine2index]]
if(length(ns1) == 1){
i <- i + 1
next
}
type <- pathSolutions[[randomLine1index]][1]
typeIndex <- getTypeIndex(colnames(sites),type)
okVec <- c()
for(i in 1:(length(ns1)-1)){
a <- ns1[i]
b <- ns1[i+1]
loadAB <- sites[a,typeIndex] + sites[a,typeIndex]
if(totalLoads[[randomLine2index]] + loadAB < capacity){
#pol je ok
okVec <- c(okVec, a)
}
}
if(length(okVec) > 0){
break
}
i <- i + 1
}
a <- sample(okVec, 1)
aIndex <- match(a,ns1)
b <- ns1[aIndex+1]
#Insert into random line 2
ns2new <- insertNodeIntoBestPlace(sites,paths,capacity,ns2,a,type)
ns2new <- insertNodeIntoBestPlace(sites,paths,capacity,ns2,b,type)
pathSolutions[[randomLine2index]] <- constructFullSolution(sites,paths,ns2new,type)
nodeSolutions[[randomLine2index]] <- ns2new
totalLoads[[randomLine2index]] <- totalLoads[[randomLine2index]] + sites[a,typeIndex] + sites[b,typeIndex]
#Rebuild or remove line 1 if necesary
if(length(ns1) == 2){
pathSolutions[[randomLine1index]] <- NULL
nodeSolutions[[randomLine1index]] <- NULL
totalLoads[[randomLine1index]] <- NULL
}
else{
indexA <- match(a, ns1)
indexB <- match(b, ns1)
ns1new <- ns1[-c(indexA,indexB)]
#Repair the path without the lost nodes
pathSolutions[[randomLine1index]] <- constructFullSolution(sites,paths,ns1new, type)
nodeSolutions[[randomLine1index]] <- list(ns1new)
totalLoads[[randomLine1index]] <- (totalLoads[[randomLine1index]] - sites[a,typeIndex]) - sites[b,typeIndex]
}
list(pathSolutions,nodeSolutions, totalLoads)
}
randomShift20(sites,paths,capacity,initialSolution[[1]])
debugSource('D:/Projects/R Studio/naloga5/mutators.R')
randomShift20(sites,paths,capacity,initialSolution[[1]])
debugSource('D:/Projects/R Studio/naloga5/mutators.R')
randomShift20(sites,paths,capacity,initialSolution[[1]])
debugSource('D:/Projects/R Studio/naloga5/mutators.R')
randomShift20(sites,paths,capacity,initialSolution[[1]])
debugSource('D:/Projects/R Studio/naloga5/mutators.R')
randomShift20(sites,paths,capacity,initialSolution[[1]])
View(a)
#Moves a random node from randomly picked Line1 to randomly picked Line2
#If the new capacity of Line2 would be over the capacity limit, another two lines are picked
#If no valid transfer (capacity wise) is found in maxIterations, return NULL
#After a valid swap pair is found, Line1 gets repaired or removed if no nodes are left in it
#All permutations of line2 and the new node are computed, to insert the node into the best place
#The new solution is returned
randomShift10 <- function(sites, paths, capacity, megaSolution){
pathSolutions <- megaSolution[[1]]
nodeSolutions <- megaSolution[[2]]
totalLoads <- megaSolution[[3]]
#Pick random lines 1 and 2
#This is cheap and reapeated until a valid candidates are picked or max iterations is reached
i <- 1
maxIter <- 500
while(1){
randomLinesInds <- sample(1:length(pathSolutions),2)
randomLine1index <- randomLinesInds[[1]]
randomLine2index <- randomLinesInds[[2]]
type <- pathSolutions[[randomLine1index]][1]
typeIndex <- getTypeIndex(colnames(sites),type)
ns1 <- nodeSolutions[[randomLine1index]]
ns2 <- nodeSolutions[[randomLine2index]]
#Pick a random node from random line 1
if(length(ns1) == 1){
randomNode <- ns1[1]
}
else{
randomNode <- sample(ns1[1:(length(ns1))],1)
}
if(i == maxIter) return(NULL)
if((totalLoads[[randomLine2index]] + sites[randomNode,typeIndex]) < capacity){
break;
}
i <- i + 1
}
#Insert into random line 2
ns2new <- insertNodeIntoBestPlace(sites,paths,capacity,ns2,randomNode,type)
pathSolutions[[randomLine2index]] <- constructFullSolution(sites,paths,ns2new,type)
nodeSolutions[[randomLine2index]] <- ns2new
totalLoads[[randomLine2index]] <- totalLoads[[randomLine2index]] + sites[randomNode,typeIndex]
#Rebuild or remove line 1 if necesary
if(length(ns1) == 1){
pathSolutions[[randomLine1index]] <- NULL
nodeSolutions[[randomLine1index]] <- NULL
totalLoads[[randomLine1index]] <- NULL
}
else{
index <- match(randomNode, ns1)
ns1new <- ns1[-index]
#Repair the path without the lost node
pathSolutions[[randomLine1index]] <- constructFullSolution(sites,paths,ns1new, type)
nodeSolutions[[randomLine1index]] <- list(ns1new)
totalLoads[[randomLine1index]] <- totalLoads[[randomLine1index]] - sites[randomNode,typeIndex]
}
list(pathSolutions,nodeSolutions, totalLoads)
}
insertNodeIntoBestPlace <- function(sites,paths, capacity, nodes,node, type){
bestPlace <- 1
bestCost <- Inf
best <- NULL
for(place in 0:(length(nodes))){
if(place == 0){
nodesNew <- c(node, nodes)
}
else{
nodesNew <- c(nodes[1:place],node)
if(place < length(nodes)){
nodesNew <- c(nodesNew, nodes[(place+1):(length(nodes))])
}
}
repaired <- constructFullSolution(sites,paths,nodesNew,type)
cost <- lineCost(sites,paths,capacity,repaired,nodesNew,type)
if(cost < bestCost){
bestCost <- cost
best <- nodesNew
}
}
best
}
randomSwap11 <- function(sites, paths, capacity, megaSolution){
pathSolutions <- megaSolution[[1]]
nodeSolutions <- megaSolution[[2]]
totalLoads <- megaSolution[[3]]
#Pick random lines 1 and 2
#This is cheap and reapeated until a valid candidates are picked or max iterations is reached
i <- 1
maxIter <- 500
while(1){
if(i == maxIter) return(NULL)
randomLinesInds <- sample(1:length(pathSolutions),2)
randomLine1index <- randomLinesInds[[1]]
randomLine2index <- randomLinesInds[[2]]
type <- pathSolutions[[randomLine1index]][1]
typeIndex <- getTypeIndex(colnames(sites),type)
ns1 <- nodeSolutions[[randomLine1index]]
ns2 <- nodeSolutions[[randomLine2index]]
#If both lines service just one node, no change would happen, retry
if(length(ns1) == 1 & length(ns2) == 1){
i <- i + 1
next;
}
#Pick a random node from random line 1
if(length(ns1) == 1){
randomNode1 <- ns1[1]
}
else{
randomNode1 <- sample(ns1[1:(length(ns1))],1)
}
#Pick a random node from line 2
if(length(ns2) == 1){
randomNode2 <- ns2[1]
}
else{
randomNode2 <- sample(ns2[1:(length(ns2))],1)
}
newLoad1 <- (totalLoads[[randomLine1index]] - sites[randomNode1,typeIndex]) + sites[randomNode2,typeIndex]
newLoad2 <- (totalLoads[[randomLine2index]] - sites[randomNode2,typeIndex]) + sites[randomNode1,typeIndex]
#Found something we can swap
if(newLoad1 < capacity && newLoad2 < capacity){
break;
}
i <- i + 1
}
#Remove selected nodes from lines
index1 <- match(randomNode1, ns1)
index2 <- match(randomNode2, ns2)
ns1new <- ns1[-index1]
ns2new <- ns2[-index2]
ns1new <- insertNodeIntoBestPlace(sites,paths,capacity,ns1new,randomNode2,type)
ns2new <- insertNodeIntoBestPlace(sites,paths,capacity,ns2new,randomNode1,type)
pathSolutions[[randomLine1index]] <- constructFullSolution(sites,paths,ns1new,type)
pathSolutions[[randomLine2index]] <- constructFullSolution(sites,paths,ns2new,type)
nodeSolutions[[randomLine1index]] <- list(ns1new)
nodeSolutions[[randomLine2index]] <- list(ns2new)
totalLoads[[randomLine1index]] <- newLoad1
totalLoads[[randomLine2index]] <- newLoad2
list(pathSolutions,nodeSolutions, totalLoads)
}
randomShift20 <- function(sites, paths, capacity, megaSolution){
pathSolutions <- megaSolution[[1]]
nodeSolutions <- megaSolution[[2]]
totalLoads <- megaSolution[[3]]
#Pick random lines 1 and 2
#This is cheap and reapeated until a valid candidates are picked or max iterations is reached
i <- 1
maxIter <- 500
while(1){
if(i >= maxIter) return(NULL)
randomLinesInds <- sample(1:length(pathSolutions),2)
randomLine1index <- randomLinesInds[[1]]
randomLine2index <- randomLinesInds[[2]]
ns1 <- nodeSolutions[[randomLine1index]]
ns2 <- nodeSolutions[[randomLine2index]]
if(length(ns1) == 1){
i <- i + 1
next
}
type <- pathSolutions[[randomLine1index]][1]
typeIndex <- getTypeIndex(colnames(sites),type)
okVec <- c()
for(i in 1:(length(ns1)-1)){
a <- ns1[i]
b <- ns1[i+1]
loadAB <- sites[a,typeIndex] + sites[a,typeIndex]
if(totalLoads[[randomLine2index]] + loadAB < capacity){
#pol je ok
okVec <- c(okVec, a)
}
}
if(length(okVec) > 0){
break
}
i <- i + 1
}
a <- unlist(sample(list(okVec), 1))
aIndex <- match(a,ns1)
b <- ns1[aIndex+1]
#Insert into random line 2
ns2new <- insertNodeIntoBestPlace(sites,paths,capacity,ns2,a,type)
ns2new <- insertNodeIntoBestPlace(sites,paths,capacity,ns2,b,type)
pathSolutions[[randomLine2index]] <- constructFullSolution(sites,paths,ns2new,type)
nodeSolutions[[randomLine2index]] <- ns2new
totalLoads[[randomLine2index]] <- totalLoads[[randomLine2index]] + sites[a,typeIndex] + sites[b,typeIndex]
#Rebuild or remove line 1 if necesary
if(length(ns1) == 2){
pathSolutions[[randomLine1index]] <- NULL
nodeSolutions[[randomLine1index]] <- NULL
totalLoads[[randomLine1index]] <- NULL
}
else{
indexA <- match(a, ns1)
indexB <- match(b, ns1)
ns1new <- ns1[-c(indexA,indexB)]
#Repair the path without the lost nodes
pathSolutions[[randomLine1index]] <- constructFullSolution(sites,paths,ns1new, type)
nodeSolutions[[randomLine1index]] <- list(ns1new)
totalLoads[[randomLine1index]] <- (totalLoads[[randomLine1index]] - sites[a,typeIndex]) - sites[b,typeIndex]
}
list(pathSolutions,nodeSolutions, totalLoads)
}
randomShift20(sites,paths,capacity,initialSolution[[1]])
source("common.R")
source("readProblem.R")
source("solutionCheck.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
source("localSearch.R")
source("mutators.R")
#Reading file
file <- "input/Problem2.txt"
capSitesPaths <- readProblem(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
initialSolution <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(initialSolution),capacity)
newSolution <- localSearch(sites,paths,capacity,initialSolution)
solutionCheck(sites,paths,megaToNormalSolution(newSolution),capacity)
debugSource('D:/Projects/R Studio/naloga5/mutators.R')
debugSource('D:/Projects/R Studio/naloga5/mutators.R')
source("common.R")
source("readProblem.R")
source("solutionCheck.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
source("localSearch.R")
source("mutators.R")
#Reading file
file <- "input/Problem2.txt"
capSitesPaths <- readProblem(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
initialSolution <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(initialSolution),capacity)
newSolution <- localSearch(sites,paths,capacity,initialSolution)
solutionCheck(sites,paths,megaToNormalSolution(newSolution),capacity)
debugSource('D:/Projects/R Studio/naloga5/mutators.R')
randomShift20(sites,paths,capacity,initialSolution[[1]])
randomShift20(sites,paths,capacity,initialSolution[[2]])
randomShift20(sites,paths,capacity,initialSolution[[2]])
debugSource('D:/Projects/R Studio/naloga5/mutators.R')
randomShift20(sites,paths,capacity,initialSolution[[2]])
View(nodeSolutions)
View(nodeSolutions)
debugSource('D:/Projects/R Studio/naloga5/mutators.R')
debugSource('D:/Projects/R Studio/naloga5/mutators.R')
debugSource('D:/Projects/R Studio/naloga5/mutators.R')
randomShift20(sites,paths,capacity,initialSolution[[2]])
c
c
c
save.image("D:/Projects/R Studio/naloga5/env1.RData")
load("D:/Projects/R Studio/naloga5/env1.RData")
setwd("D:/Projects/R Studio/naloga5")
source("common.R")
source("readProblem.R")
source("solutionCheck.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
source("localSearch.R")
source("mutators.R")
source("readWriteSolution.R")
#Reading file
file <- "input/Problem2.txt"
capSitesPaths <- readProblem(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
initialSolution <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,capacity,megaToNormalSolution(initialSolution))
newSolution <- localSearch(sites,paths,capacity,initialSolution, printIT = TRUE)
solutionCheck(sites,paths,capacity,megaToNormalSolution(newSolution))
setwd("D:/Projects/R Studio/naloga5")
source("common.R")
source("readProblem.R")
source("solutionCheck.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
source("localSearch.R")
source("mutators.R")
source("readWriteSolution.R")
#Reading file
file <- "input/Problem2.txt"
capSitesPaths <- readProblem(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
initialSolution <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,capacity,megaToNormalSolution(initialSolution))
newSolution <- localSearch(sites,paths,capacity,initialSolution, printIT = TRUE)
solutionCheck(sites,paths,capacity,megaToNormalSolution(newSolution))
setwd("D:/Projects/R Studio/naloga5")
source("common.R")
source("readProblem.R")
source("solutionCheck.R")
source("typeCheck.R")
source("lineCost.R")
source("initialSolver.R")
source("localSearch.R")
source("mutators.R")
source("readWriteSolution.R")
#Reading file
file <- "input/Problem3.txt"
capSitesPaths <- readProblem(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
initialSolution <- initialSolver(sites,paths,capacity)
solutionCheck(sites,paths,capacity,megaToNormalSolution(initialSolution))
newSolution <- localSearch(sites,paths,capacity,initialSolution, printIT = TRUE)
solutionCheck(sites,paths,capacity,megaToNormalSolution(newSolution))
