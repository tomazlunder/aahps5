paths$ID2==to &
paths$Capacity > load), ]
#print(op1)
op2 <- paths[which(
paths$ID1==to &
paths$ID2==from &
paths$OneWay== 0 &
paths$Capacity > load), ]
#print(op2)
total <- rbind(op1,op2)
#print(total)
if(nrow(total) == 0){
return(-1)
}
min(total$Distance)
}
# Tests based on Problem1.txt
# Test1: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,100)
# Test2: Solution with missing path
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,4,1), #<- (5->4) doesn't exist
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,100)
# Test3: Solution with garbage left over
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1), #<- (Organic from 5 not collected)
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,100)
# Test4: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,3,1),c(3,1,5,2,4,1)) #<- (1,5,2,4 - fills up plastic so much, that the (4->1 road cant handle it))
solutionCheck(sites,paths,testSol,100)
solutionCheck <- function(sites, paths, solution, maxLoad, printMid = FALSE){
totalCost <- 0
lineIndex <-1
for(line in solution){
time <- 0.5 #Starting time due to unloading
cost <- 10 #Starting fixed cost
distance <- 0
load <- 0
runType <- line[1]
last <- 1
for(site in line[3:length(line)]){
bestPath <- getBestPath(last, site, paths, load)
if(bestPath == -1){
cat("ERROR: Path [",last,"->",site,"] from solution line[",lineIndex,"] not found!\n",
"(Could also be breaking the road capacity rule) Terminating... [FAIL]\n")
stop()
}
distance <- distance + bestPath
#Organic
if(runType == 1 && (sites[sites$ID==site,4]+load) <= maxLoad){
load <- load + sites[sites$ID==site,4]
sites[sites$ID==site,4] <- 0
time <- time + 0.2
}
#Plastic
else if(runType == 2 & sites[sites$ID==site,5]+load <= maxLoad){
load <- load + sites[sites$ID==site,5]
sites[sites$ID==site,5] <- 0
time <- time + 0.2
}
#Paper
else if(runType == 3 & sites[sites$ID==site,6]+load <= maxLoad){
load <- load + sites[sites$ID==site,6]
sites[sites$ID==site,6] <- 0
time <- time + 0.2
}
last <- site
}
#Time due to travel
time <- time + (distance/50)
#Fuel cost
fuelCost <- (distance*0.1)
if(printMid) cat(" -Fuel:",fuelCost," for ",distance," km\n")
cost <- cost + fuelCost
#Worker cost
if(time < 8){
workerCost <- time * 10
} else {
workerCost <-  8 * 10
workerCost <- workerCost + (time - 8) * 20
}
if(printMid) cat(" -Work:",workerCost," for ",time," hours\n")
cost <- cost + workerCost
#Add total line cost to total cost
cat("Line ",lineIndex,"cost: ",cost,"\n")
totalCost <- totalCost + cost
lineIndex <- lineIndex + 1
}
cat("Total cost:",totalCost," [RESULT]\n")
cat("All paths were valid, following one-way and load rules. [OK]\n")
#Check if all garbage was picked up
uncollected <- sites[which(sites$Organic>0 |
sites$Plastic>0 |
sites$Paper>0),]
if(nrow(uncollected) >0){
cat("Uncollected garbage detected! [FAIL]\n")
print(uncollected)
} else {
cat("All garbage was collected! [OK]\n")
}
}
getBestPath <- function(from,to,paths,load){
op1 <- paths[which(
paths$ID1==from &
paths$ID2==to &
paths$Capacity > load), ]
#print(op1)
op2 <- paths[which(
paths$ID1==to &
paths$ID2==from &
paths$OneWay== 0 &
paths$Capacity > load), ]
#print(op2)
total <- rbind(op1,op2)
#print(total)
if(nrow(total) == 0){
return(-1)
}
min(total$Distance)
}
# Tests based on Problem1.txt ---
tests <- function(){
# Test1: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,100)
# Test2: Solution with missing path
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,4,1), #<- (5->4) doesn't exist
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,100)
# Test3: Solution with garbage left over
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1), #<- (Organic from 5 not collected)
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,100)
# Test4: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,3,1),c(3,1,5,2,4,1)) #<- (1,5,2,4 - fills up plastic so much, that the (4->1 road cant handle it))
solutionCheck(sites,paths,testSol,100)
}
test()
tests()
solutionCheck <- function(sites, paths, solution, maxLoad, printMid = FALSE){
totalCost <- 0
lineIndex <-1
for(line in solution){
time <- 0.5 #Starting time due to unloading
cost <- 10 #Starting fixed cost
distance <- 0
load <- 0
runType <- line[1]
last <- 1
for(site in line[3:length(line)]){
bestPath <- getBestPath(last, site, paths, load)
if(bestPath == -1){
cat("ERROR: Path [",last,"->",site,"] from solution line[",lineIndex,"] not found!\n",
"(Could also be breaking the road capacity rule) Terminating... [FAIL]\n")
stop()
}
distance <- distance + bestPath
#Organic
if(runType == 1 && (sites[sites$ID==site,4]+load) <= maxLoad){
load <- load + sites[sites$ID==site,4]
sites[sites$ID==site,4] <- 0
time <- time + 0.2
}
#Plastic
else if(runType == 2 & sites[sites$ID==site,5]+load <= maxLoad){
load <- load + sites[sites$ID==site,5]
sites[sites$ID==site,5] <- 0
time <- time + 0.2
}
#Paper
else if(runType == 3 & sites[sites$ID==site,6]+load <= maxLoad){
load <- load + sites[sites$ID==site,6]
sites[sites$ID==site,6] <- 0
time <- time + 0.2
}
last <- site
}
#Time due to travel
time <- time + (distance/50)
#Fuel cost
fuelCost <- (distance*0.1)
if(printMid) cat(" -Fuel:",fuelCost," for ",distance," km\n")
cost <- cost + fuelCost
#Worker cost
if(time < 8){
workerCost <- time * 10
} else {
workerCost <-  8 * 10
workerCost <- workerCost + (time - 8) * 20
}
if(printMid) cat(" -Work:",workerCost," for ",time," hours\n")
cost <- cost + workerCost
#Add total line cost to total cost
cat("Line ",lineIndex,"cost: ",cost,"\n")
totalCost <- totalCost + cost
lineIndex <- lineIndex + 1
}
cat("Total cost:",totalCost," [RESULT]\n")
cat("All paths were valid, following one-way and load rules. [OK]\n")
#Check if all garbage was picked up
uncollected <- sites[which(sites$Organic>0 |
sites$Plastic>0 |
sites$Paper>0),]
if(nrow(uncollected) >0){
cat("Uncollected garbage detected! [FAIL]\n")
print(uncollected)
} else {
cat("All garbage was collected! [OK]\n")
}
}
getBestPath <- function(from,to,paths,load){
op1 <- paths[which(
paths$ID1==from &
paths$ID2==to &
paths$Capacity > load), ]
#print(op1)
op2 <- paths[which(
paths$ID1==to &
paths$ID2==from &
paths$OneWay== 0 &
paths$Capacity > load), ]
#print(op2)
total <- rbind(op1,op2)
#print(total)
if(nrow(total) == 0){
return(-1)
}
min(total$Distance)
}
# Tests based on Problem1.txt ---
# Test1: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,100)
# Test2: Solution with missing path
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,4,1), #<- (5->4) doesn't exist
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,100)
# Test3: Solution with garbage left over
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1), #<- (Organic from 5 not collected)
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,100)
# Test4: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,3,1),c(3,1,5,2,4,1)) #<- (1,5,2,4 - fills up plastic so much, that the (4->1 road cant handle it))
solutionCheck(sites,paths,testSol,100)
# Tests based on Problem1.txt ---
source("solutionCheck.R")
# Test1: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,100)
# Test2: Solution with missing path
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,4,1), #<- (5->4) doesn't exist
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,100)
# Test3: Solution with garbage left over
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1), #<- (Organic from 5 not collected)
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,100)
# Test4: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,3,1),c(3,1,5,2,4,1)) #<- (1,5,2,4 - fills up plastic so much, that the (4->1 road cant handle it))
solutionCheck(sites,paths,testSol,100)
# Tests based on Problem1.txt ---
source("solutionCheck.R")
# Test1: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,100)
# Test2: Solution with missing path
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,4,1), #<- (5->4) doesn't exist
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,100)
# Test3: Solution with garbage left over
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1), #<- (Organic from 5 not collected)
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,100)
# Test4: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,3,1),c(3,1,5,2,4,1)) #<- (1,5,2,4 - fills up plastic so much, that the (4->1 road cant handle it))
solutionCheck(sites,paths,testSol,100)
readFile <- function(filke){
#Read num sites and truck capacity
con <- file(file,"r")
first_line <- readLines(con,n=1)
close(con)
first_line <- unlist(strsplit(first_line, ","))
NumSites <- first_line[1]
Capacity <- first_line[2]
#print(NumSites)
#print(Capacity)
#Read site and path data
data <- read.csv(file=file, header = FALSE,skip=1)
#Split data into sites and paths
sites <- data[!is.na(data$V6),]
paths <- data[is.na(data$V6),]
paths$V6 <- NULL
rownames(paths) <- NULL
colnames(sites) <- c("ID","X","Y","Organic","Plastic","Paper")
colnames(paths) <- c("ID1","ID2", "Distance","OneWay","Capacity")
toReturn <- list(Capacity, sites, paths)
toReturn
}
capSitesPaths <- readFile(file)
# Tests based on Problem1.txt ---
source("solutionCheck.R")
source("readFile.R")
file = "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[1]
sites <- capSitesPaths[2]
paths <- capSitesPaths[3]
# Test1: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,capacity)
# Test2: Solution with missing path
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,4,1), #<- (5->4) doesn't exist
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,capacity)
# Test3: Solution with garbage left over
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1), #<- (Organic from 5 not collected)
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,capacity)
# Test4: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,3,1),c(3,1,5,2,4,1)) #<- (1,5,2,4 - fills up plastic so much, that the (4->1 road cant handle it))
solutionCheck(sites,paths,testSol,capacity)
# Tests based on Problem1.txt ---
source("solutionCheck.R")
source("readFile.R")
file = "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[1]
sites <- capSitesPaths[2]
paths <- capSitesPaths[3]
# Test1: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,capacity)
#Reads an input file and returns a list containing
# 1: Vehicle capacity
# 2: Site dataframe
# 3: Path dataframe
readFile <- function(file){
#Read num sites and truck capacity
con <- file(file,"r")
first_line <- readLines(con,n=1)
close(con)
first_line <- unlist(strsplit(first_line, ","))
NumSites <- first_line[1]
Capacity <- first_line[2]
#print(NumSites)
#print(Capacity)
#Read site and path data
data <- read.csv(file=file, header = FALSE,skip=1)
#Split data into sites and paths
sites <- data[!is.na(data$V6),]
paths <- data[is.na(data$V6),]
paths$V6 <- NULL
rownames(paths) <- NULL
colnames(sites) <- c("ID","X","Y","Organic","Plastic","Paper")
colnames(paths) <- c("ID1","ID2", "Distance","OneWay","Capacity")
toReturn <- c(Capacity, sites, paths)
toReturn
}
# Tests based on Problem1.txt ---
source("solutionCheck.R")
source("readFile.R")
file = "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[1]
sites <- capSitesPaths[2]
paths <- capSitesPaths[3]
# Test1: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,capacity)
# Tests based on Problem1.txt ---
source("solutionCheck.R")
source("readFile.R")
file = "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- unlist(capSitesPaths[1])
sites <- unlist(capSitesPaths[2])
paths <- unlist(capSitesPaths[3])
# Test1: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,capacity)
# Tests based on Problem1.txt ---
source("solutionCheck.R")
source("readFile.R")
file = "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- unlist(capSitesPaths[1])
sites <- capSitesPaths[2]
paths <- unlist(capSitesPaths[3])
# Tests based on Problem1.txt ---
source("solutionCheck.R")
source("readFile.R")
file = "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
# Test1: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,capacity)
# Test2: Solution with missing path
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,4,1), #<- (5->4) doesn't exist
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,capacity)
# Test3: Solution with garbage left over
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1), #<- (Organic from 5 not collected)
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,capacity)
# Test4: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,3,1),c(3,1,5,2,4,1)) #<- (1,5,2,4 - fills up plastic so much, that the (4->1 road cant handle it))
solutionCheck(sites,paths,testSol,capacity)
sites
sites$Organic
bla <- "Organic"
sites$bla
# Tests based on Problem1.txt ---
source("solutionCheck.R")
source("readFile.R")
file = "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
# Test1: OK Solution
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,capacity)
# Test2: Solution with missing path
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,4,1), #<- (5->4) doesn't exist
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,capacity)
# Test3: Solution with garbage left over
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1), #<- (Organic from 5 not collected)
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,2,1),c(3,1,3,1),c(3,1,4,1),c(3,1,5,1))
solutionCheck(sites,paths,testSol,capacity)
# Test4: Solution trying to use a road with load limit, while over it
testSol<- list(c(1,1,2,1),c(1,1,3,1),c(1,1,4,1),c(1,1,5,1),
c(2,1,2,1),c(2,1,3,1),c(2,1,4,1),c(2,1,5,1),
c(3,1,3,1),c(3,1,5,2,4,1)) #<- (1,5,2,4 - fills up plastic so much, that the (4->1 road cant handle it))
solutionCheck(sites,paths,testSol,capacity)
a <- list(1,2)
a
a.append(3)
a.add(3)
add(a,3)
append(a,3)
a
a <- append(a,3)
a
c <- c(1,2)
c
append(c,3)
c <- append(c,3)
c
c
append(c,4)
c
c <- c(c,4)
c
c <- c(1)
c
