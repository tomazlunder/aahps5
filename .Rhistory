}
leftToServe <- function(sites, typeIndex){
nrow(sites[sites[,typeIndex] > 0,])
}
source("dumb1.R")
dumbSolver(sites_,paths_,100)
dumbSolver(sites_,paths_,100)
source("dumb1.R")
dumbSolver(sites_,paths_,100)
source("dumb1.R")
dumbSolver(sites_,paths_,100)
source("dumb1.R")
dumbSolver(sites_,paths_,100)
mySites
source("dumb1.R")
dumbSolver(sites_,paths_,100)
source("dumb1.R")
dumbSolver(sites_,paths_,100)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity_ <- capSitesPaths[[1]]
sites_ <- capSitesPaths[[2]]
paths_ <- capSitesPaths[[3]]
dumbSolver(sites_,paths_,100)
sites
sites_
sites[1,1]
sites[1,2]
sites[1,4]
sites[2,4]
source('D:/Projects/R Studio/naloga5/dumb1.R')
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity_ <- capSitesPaths[[1]]
sites_ <- capSitesPaths[[2]]
paths_ <- capSitesPaths[[3]]
dumbSolver(sites_,paths_,100)
debugSource('D:/Projects/R Studio/naloga5/dumb1.R')
dumbSolver(sites_,paths_,100)
force(typeIndex)
typeIndex
typeIndex
sites
debugSource('D:/Projects/R Studio/naloga5/dumb1.R')
dumbSolver(sites_,paths_,100)
return (findNextUnserved(myPath,load, capacity, typeIndex))
if(nrow(sn) > 0){
closest <- nearestOf(site,sn,load)
myPath <- append(myPath, closest)
load <- load + mySites[closest,typeIndex]
mySites[closest,typeIndex] <<- 0
return (findNextUnserved(myPath,load, capacity, typeIndex))
}
else{
asn <- servedNeighbors(mySites,paths,site,load,typeIndex)
for(e in asn){
myPath <- append(myPath, e)
temp <- findFirstUnserved(myPath,load, capacity, typeIndex)
if(found == 1){
return(temp)
}
else{
myPath <- myPath[1:length(myPath)-1]
}
}
return -1 #Not found (something went wrong)
}
#Solver function 1
findFirstUnserved <- function(myPath, load, capacity, typeIndex){
site <- myPath[length(myPath)]
sn <- servableNeighbors(mySites, paths, site, load, capacity, typeIndex)
if(nrow(sn) > 0){
closest <- nearestOf(site,sn,load)
myPath <- append(myPath, closest)
load <- load + mySites[closest,typeIndex]
mySites[closest,typeIndex] <<- 0
return (findNextUnserved(myPath,load, capacity, typeIndex))
}
else{
asn <- servedNeighbors(mySites,paths,site,load,typeIndex)
for(e in asn){
myPath <- append(myPath, e)
temp <- findFirstUnserved(myPath,load, capacity, typeIndex)
if(found == 1){
return(temp)
}
else{
myPath <- myPath[1:length(myPath)-1]
}
}
return -1 #Not found (something went wrong)
}
}
#Solver function 2
findNextUnserved <- function(myPath, load, capacity, typeIndex){
site <- myPath[length(myPath)]
sn <- servableNeighbors(mySites, paths, site, load, capacity, typeIndex)
if(nrow(sn) > 0){
closest <- nearestOf(site,sn,load)
myPath <- append(myPath, closest)
load <- load + mySites[mySites$ID==closest,typeIndex]
mySites[closest,typeIndex] <<- 0
return(findNextUnserved(myPath,load, capacity, type))
}
else{
return(returnToDepot(myPath, load, capacity, type))
}
}
#Solver function 3
returnToDepot <- function(myPath, load, capacity, type){
found <<- 1
toRev <- myPath[1:length(myPath)-1]
myPath <- append(myPath, rev(toRev))
myPath
}
### SOLVER
solution = list()
dumbSolver(sites_,paths_,100)
typeIndex
mySites
typeIndex
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity_ <- capSitesPaths[[1]]
sites_ <- capSitesPaths[[2]]
paths_ <- capSitesPaths[[3]]
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity_ <- capSitesPaths[[1]]
sites_ <- capSitesPaths[[2]]
paths_ <- capSitesPaths[[3]]
dumbSolver(sites_,paths_,100)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity_ <- capSitesPaths[[1]]
sites_ <- capSitesPaths[[2]]
paths_ <- capSitesPaths[[3]]
sp <- shortestPathsUnderLoad(sites,paths,capacity)
dumbSolver(sites_,paths_,100)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity_ <- capSitesPaths[[1]]
sites_ <- capSitesPaths[[2]]
paths_ <- capSitesPaths[[3]]
dumbSolver(sites_,paths_,100)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity_ <- capSitesPaths[[1]]
sites_ <- capSitesPaths[[2]]
paths_ <- capSitesPaths[[3]]
sp <- shortestPathsUnderLoad(sites,paths,capacity)
dumbSolver(sites_,paths_,100)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sp <- shortestPathsUnderLoad(sites,paths,capacity)
dumbSolver(sites,paths,100)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
dumbSolver(sites,paths,100)
sol1 <- dumbSolver(sites,paths,100)
solutionCheck(sites,paths,sol1,100)
sp <- shortestPathsUnderLoad(sites,paths,capacity)
sp
exactPath(sp,4,5)
extractPath(sp,4,5)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol1 <- dumbSolver(sites,paths,100)
a <- extractPath(sp,4,5)
a
a[:1]
a[2:*]
a[2:]
a[[2:]]
a[2:length(a)]
a[2:-1]
a[2:length(a)]
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol1 <- dumbSolver(sites,paths,100)
sol1
solutionCheck(sites,paths,sol1,capacity)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem2.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol1 <- dumbSolver(sites,paths,capacity)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem2.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol1 <- dumbSolver(sites,paths,capacity)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem2.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol1 <- dumbSolver(sites,paths,capacity)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem2.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol1 <- dumbSolver(sites,paths,capacity)
sol1 <- dumbSolver(sites,paths,capacity)
sol1 <- dumbSolver(sites,paths,capacity)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem10.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol1 <- dumbSolver(sites,paths,capacity)
solutionCheck(sites,paths,sol1,capacity)
solutionCheck(sites,paths,sol1,capacity)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
#Reading file (readFile.R)
file <- "input/Problem10.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol1 <- dumbSolver(sites,paths,capacity)
solutionCheck(sites,paths,sol1,capacity)
getBestPathToNeighbor(paths,12,13,70)
library('igraph')
g <- graph_from_data_frame(paths, directed = FALSE, vertices = sites)
plot(g)
sp <- shortestPathsUnderLoad(sites,paths,capacity)
extractPath(sp,12,13)
debugSource('D:/Projects/R Studio/naloga5/dumb1.R')
sol1 <- dumbSolver(sites,paths,capacity)
sol1 <- dumbSolver(sites,paths,capacity)
sol1 <- dumbSolver(sites,paths,capacity)
sol1 <- dumbSolver(sites,paths,capacity)
force(myPath)
debugSource('D:/Projects/R Studio/naloga5/dumb1.R')
sol1 <- dumbSolver(sites,paths,capacity)
debugSource('D:/Projects/R Studio/naloga5/dumb1.R')
sol1 <- dumbSolver(sites,paths,capacity)
myPath
debugSource('D:/Projects/R Studio/naloga5/dumb1.R')
source("dumb1.R")
sol1 <- dumbSolver(sites,paths,capacity)
debugSource('D:/Projects/R Studio/naloga5/dumb1.R')
debugSource('D:/Projects/R Studio/naloga5/dumb1.R')
sol1 <- dumbSolver(sites,paths,capacity)
debugSource('D:/Projects/R Studio/naloga5/dumb1.R')
sol1 <- dumbSolver(sites,paths,capacity)
debugSource('D:/Projects/R Studio/naloga5/dumb1.R')
sol1 <- dumbSolver(sites,paths,capacity)
sol1 <- dumbSolver(sites,paths,capacity)
sol1 <- dumbSolver(sites,paths,capacity)
debugSource('D:/Projects/R Studio/naloga5/dumb1.R')
sol1 <- dumbSolver(sites,paths,capacity)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb2.R")
source("mutation.R")
source("typeCheck.R")
#Reading file (readFile.R)
file <- "input/Problem2.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sites
sp <- shortestPathsUnderLoad(sites,paths,capacity)
extractPath(sp,1,2)
extractPath(sp,1,3)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb2.R")
source("dumb3.R")
source("mutation.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
#Reading file (readFile.R)
file <- "input/Problem2.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol3 <- dumbSolver3(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(sol3),capacity)
##install.packages("igraph")
library('igraph')
library('igraph')
res <- mutate2(sites,paths,capacity,sol3)
mutate2 <- function(sites,paths,capacity, megaSolution){
totalCost <- 0
for(type in c(1,2,3)){
typeSolutions <- megaSolution[[type]]
pathSolutions <- typeSolutions[[1]] #aka the initial solution
#Cost of initial solution for type
bestCost <- solutionCheckType(sites,paths,pathSolutions, capacity, type)
best <- pathSolutions
i <- 1
while(1){
solNew <- removeAndReinsert2(sites,paths,capacity,typeSolutions)
#Check validity and cost of newly constructed solution
invisible(capture.output( res <- solutionCheckType(sites,paths,solNew[[1]],capacity,type) ))
#If the cost is better, replace best known solution
if(res < bestCost){
costDecrease <- bestCost - res
cat("New best found ", costDecrease, " decrease in cost!!!!!!!!!!!!!!!!!!!!!!!!!\n")
bestCost <- res
best <- solNew
#Reset iteration counter to 1
i <- 1
}
i <- i + 1
if(i == 200){
print("No changes")
break
}
}
totalCost <- totalCost + bestCost
}
list(totalCost,solNew)
}
mutate2 <- function(sites,paths,capacity, megaSolution){
totalCost <- 0
for(type in c(1,2,3)){
typeSolutions <- megaSolution[[type]]
pathSolutions <- typeSolutions[[1]] #aka the initial solution
#Cost of initial solution for type
bestCost <- solutionCheckType(sites,paths,pathSolutions, capacity, type)
best <- pathSolutions
i <- 1
while(1){
solNew <- removeAndReinsert2(sites,paths,capacity,typeSolutions)
#Check validity and cost of newly constructed solution
invisible(capture.output( res <- solutionCheckType(sites,paths,solNew[[1]],capacity,type) ))
#If the cost is better, replace best known solution
if(res < bestCost){
costDecrease <- bestCost - res
cat("New best found ", costDecrease, " decrease in cost!!!!!!!!!!!!!!!!!!!!!!!!!\n")
bestCost <- res
best <- solNew
#Reset iteration counter to 1
i <- 1
}
i <- i + 1
if(i == 200){
print("No changes")
break
}
}
totalCost <- totalCost + bestCost
}
list(totalCost,solNew)
}
res <- mutate2(sites,paths,capacity,sol3)
res[1]
solutionCheck(sites,paths,megaToNormalSolution(sol3),capacity)
mutate2(sites,paths,capacity,type1)
res <- mutate2(sites,paths,capacity,sol3)
mutate2 <- function(sites,paths,capacity, megaSolution){
totalCost <- 0
for(type in c(1,2,3)){
typeSolutions <- megaSolution[[type]]
pathSolutions <- typeSolutions[[1]] #aka the initial solution
#Cost of initial solution for type
bestCost <- solutionCheckType(sites,paths,pathSolutions, capacity, type)
best <- pathSolutions
i <- 1
while(1){
solNew <- removeAndReinsert2(sites,paths,capacity,typeSolutions)
#Check validity and cost of newly constructed solution
invisible(capture.output( res <- solutionCheckType(sites,paths,solNew[[1]],capacity,type) ))
#If the cost is better, replace best known solution
if(res < bestCost){
costDecrease <- bestCost - res
cat("New best found ", costDecrease, " decrease in cost!!!!!!!!!!!!!!!!!!!!!!!!!\n")
bestCost <- res
best <- solNew
#Reset iteration counter to 1
i <- 1
}
i <- i + 1
if(i == 1000){
print("No changes")
break
}
}
totalCost <- totalCost + bestCost
}
list(totalCost,solNew)
}
type1 <- list(sol1[[1]][1:11],sol1[[2]][1:11])
res <- mutate2(sites,paths,capacity,sol3)
source("solutionCheck.R")
source("readFile.R")
source("common.R")
source("dumb1.R")
source("dumb2.R")
source("dumb3.R")
source("mutation.R")
source("mutators.R")
source("typeCheck.R")
source("lineCost.R")
#Reading file (readFile.R)
file <- "input/Problem1.txt"
capSitesPaths <- readFile(file)
capacity <- capSitesPaths[[1]]
sites <- capSitesPaths[[2]]
paths <- capSitesPaths[[3]]
sol3 <- dumbSolver3(sites,paths,capacity)
solutionCheck(sites,paths,megaToNormalSolution(sol3),capacity)
res <- mutate2(sites,paths,capacity,sol3)
