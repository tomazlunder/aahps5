dumbSolver <- function(capacity, sites, paths){
  types = c(1,2,3)
  for(type in types){
    solution = c(type)
    
    load <- 0
    currentSite <- 1
    served <- c(1)
    
    #STEP 1 - Initial search (move through served nodes untill finding an unserved neighbor)
    #STEP 2 - Serve the frist node found unserved,
      #if any neighbors that are servable, go serve them
      #else return to depot
    
    #1
  }
}

servableNeighbors <- function(site, sites, paths, load, capacity, type){
  neighbors <- getNeighbors(site,paths, load)
  
  if(type == 1) typeName <- "Organic"
  else if(type == 2) typeName <- "Plastic"
  else if(type == 3) typeName <- "Paper"
  
  typeColIndex = grep(typeName, colnames(df))
  
  if(type == 1){
    select <- sites[which(sites$ID %in% neighbors &
                          sites$Organic > 0 &
                          sites$Organic < (capacity-load)),]
  }
  else if(type == 2){
    select <- sites[which(sites$ID %in% neighbors &
                          sites$Plastic > 0 &
                          sites$Plastic < (capacity-load)),]
  }
  else if(type == 3){
    select <- sites[which(sites$ID %in% neighbors &
                          sites$Paper > 0 &
                          sites$Paper < (capacity-load)),]
  }
  
  if(nrow(select) == 0) return(-1) #No neighbor to serve
  select
}

servedNeighbors <- function(site,sites,paths,load){
  neighbors <- getNeighbors(site,paths, load)
  if(type == 1){
    select <- sites[which(sites$ID %in% neighbors &
                          sites$Organic == 0),]
  }
  else if(type == 2){
    select <- sites[which(sites$ID %in% neighbors &
                          sites$Plastic == 0),]
  }
  else if(type == 3){
    select <- sites[which(sites$ID %in% neighbors &
                          sites$Paper == 0),]
  }
  select
}

nearestOf <- function(site, options, paths, load){
  if(nrow(options) == 0){
    print("nearestOf - no options given [ERR]")
    return()
  }
  
  shortest <- NULL
  dist <- Inf
  
  for(option in options$ID){
    optLen <- getBestPathToNeighbor(site, option, paths, load)
    if(optLen < dist){
      dist <- optLen
      shortest <- option
    }
  }
  
  shortest
}